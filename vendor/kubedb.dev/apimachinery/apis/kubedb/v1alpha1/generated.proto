/*
Copyright The KubeDB Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package kubedb.dev.apimachinery.apis.kubedb.v1alpha1;

import "k8s.io/api/apps/v1/generated.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";
import "kmodules.xyz/custom-resources/apis/appcatalog/v1alpha1/generated.proto";
import "kmodules.xyz/monitoring-agent-api/api/v1/generated.proto";
import "kmodules.xyz/objectstore-api/api/v1/generated.proto";
import "kmodules.xyz/offshoot-api/api/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

message CertificateSpec {
  // Organization is the organization to be used on the Certificate
  // +optional
  repeated string organization = 1;

  // Certificate default Duration
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration duration = 2;

  // Certificate renew before expiration duration
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration renewBefore = 3;

  // DNSNames is a list of subject alt names to be used on the Certificate.
  // +optional
  repeated string dnsNames = 4;

  // IPAddresses is a list of IP addresses to be used on the Certificate
  // +optional
  repeated string ipAddresses = 5;

  // URISANs is a list of URI Subject Alternative Names to be set on this
  // Certificate.
  // +optional
  repeated string uriSANs = 6;
}

message ConnectionPoolConfig {
  // Port is the port number on which PgBouncer listens to clients. Default: 5432.
  // +optional
  optional int32 port = 1;

  // PoolMode is the pooling mechanism type. Default: session.
  // +optional
  optional string poolMode = 2;

  // MaxClientConnections is the maximum number of allowed client connections. Default: 100.
  // +optional
  optional int64 maxClientConnections = 3;

  // DefaultPoolSize specifies how many server connections to allow per user/database pair. Default: 20.
  // +optional
  optional int64 defaultPoolSize = 4;

  // MinPoolSize is used to add more server connections to pool if below this number. Default: 0 (disabled).
  // +optional
  optional int64 minPoolSize = 5;

  // ReservePoolSize specifies how many additional connections to allow to a pool. 0 disables. Default: 0 (disabled).
  // +optional
  optional int64 reservePoolSize = 6;

  // ReservePoolTimeoutSeconds is the number of seconds in which if a client has not been serviced,
  // pgbouncer enables use of additional connections from reserve pool. 0 disables. Default: 5.0.
  // +optional
  optional int64 reservePoolTimeoutSeconds = 7;

  // MaxDBConnections is the maximum number of connections allowed per-database. Default: unlimited.
  // +optional
  optional int64 maxDBConnections = 8;

  // MaxUserConnections is the maximum number of users allowed per-database. Default: unlimited.
  // +optional
  optional int64 maxUserConnections = 9;

  // StatsPeriodSeconds sets how often the averages shown in various SHOW commands are updated
  // and how often aggregated statistics are written to the log.
  // +optional
  optional int64 statsPeriodSeconds = 10;

  // AdminUsers specifies an array of users who can act as PgBouncer administrators.
  // +optional
  repeated string adminUsers = 11;

  // AuthType specifies how to authenticate users. Default: md5 (md5+plain text).
  // +optional
  optional string authType = 12;

  // AuthUser looks up any user not specified in auth_file from pg_shadow. Default: not set.
  // +optional
  optional string authUser = 13;

  // IgnoreStartupParameters specifies comma-separated startup parameters that
  // pgbouncer knows are handled by admin and it can ignore them.
  // +optional
  optional string ignoreStartupParameters = 14;
}

message Databases {
  // Alias to uniquely identify a target database running inside a specific Postgres instance.
  optional string alias = 1;

  // DatabaseRef specifies the database appbinding reference in any namespace.
  optional kmodules.xyz.custom_resources.apis.appcatalog.v1alpha1.AppReference databaseRef = 2;

  // DatabaseName is the name of the target database inside a Postgres instance.
  optional string databaseName = 3;

  // DatabaseSecretRef points to a secret that contains the credentials
  // (username and password) of an existing user of this database.
  // It is used to bind a single user to this specific database connection.
  // +optional
  optional k8s.io.api.core.v1.LocalObjectReference databaseSecretRef = 4;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=elasticsearches,singular=elasticsearch,shortName=es,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message Elasticsearch {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ElasticsearchSpec spec = 2;

  optional ElasticsearchStatus status = 3;
}

message ElasticsearchClusterTopology {
  optional ElasticsearchNode master = 1;

  optional ElasticsearchNode data = 2;

  optional ElasticsearchNode client = 3;
}

message ElasticsearchList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Elasticsearch CRD objects
  repeated Elasticsearch items = 2;
}

message ElasticsearchNode {
  // Replicas represents number of replica for this specific type of node
  optional int32 replicas = 1;

  optional string prefix = 2;

  // Storage to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 3;

  // Compute Resources required by the sidecar container.
  optional k8s.io.api.core.v1.ResourceRequirements resources = 4;

  // An eviction is allowed if at most "maxUnavailable" pods selected by
  // "selector" are unavailable after the eviction, i.e. even in absence of
  // the evicted pod. For example, one can prevent all voluntary evictions
  // by specifying 0. This is a mutually exclusive setting with "minAvailable".
  // +optional
  optional k8s.io.apimachinery.pkg.util.intstr.IntOrString maxUnavailable = 5;
}

message ElasticsearchSpec {
  // Version of Elasticsearch to be deployed.
  optional string version = 1;

  // Number of instances to deploy for a Elasticsearch database.
  optional int32 replicas = 2;

  // Elasticsearch topology for node specification
  optional ElasticsearchClusterTopology topology = 3;

  // To enable ssl in transport & http layer
  optional bool enableSSL = 4;

  // Secret with SSL certificates
  optional k8s.io.api.core.v1.SecretVolumeSource certificateSecret = 5;

  // disable security of authPlugin (ie, xpack or searchguard). It disables authentication security of user.
  // If unset, default is false
  optional bool disableSecurity = 6;

  // Authentication plugin used by Elasticsearch cluster. If unset, defaults to SearchGuard.
  // Deprecated: Use elasticsearchVersion.Spec.AuthPlugin instead
  optional string authPlugin = 7;

  // Database authentication secret
  optional k8s.io.api.core.v1.SecretVolumeSource databaseSecret = 8;

  // StorageType can be durable (default) or ephemeral
  optional string storageType = 9;

  // Storage to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 10;

  // Init is used to initialize database
  // +optional
  optional InitSpec init = 11;

  // Monitor is used monitor database instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 13;

  // ConfigSource is an optional field to provide custom configuration file for database.
  // If specified, this file will be used as configuration file otherwise default configuration file will be used.
  optional k8s.io.api.core.v1.VolumeSource configSource = 14;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 15;

  // ServiceTemplate is an optional configuration for service used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.ServiceTemplateSpec serviceTemplate = 16;

  // An eviction is allowed if at most "maxUnavailable" pods selected by
  // "selector" are unavailable after the eviction, i.e. even in absence of
  // the evicted pod. For example, one can prevent all voluntary evictions
  // by specifying 0. This is a mutually exclusive setting with "minAvailable".
  // +optional
  optional k8s.io.apimachinery.pkg.util.intstr.IntOrString maxUnavailable = 17;

  // updateStrategy indicates the StatefulSetUpdateStrategy that will be
  // employed to update Pods in the StatefulSet when a revision is made to
  // Template.
  optional k8s.io.api.apps.v1.StatefulSetUpdateStrategy updateStrategy = 18;

  // Indicates that the database is paused and controller will not sync any changes made to this spec.
  // +optional
  optional bool paused = 19;

  // Indicates that the database is halted and all offshoot Kubernetes resources except PVCs are deleted.
  // +optional
  optional bool halted = 20;

  // TerminationPolicy controls the delete operation for database
  // +optional
  optional string terminationPolicy = 21;
}

message ElasticsearchStatus {
  optional string phase = 1;

  optional string reason = 2;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=etcds,singular=etcd,shortName=etc,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message Etcd {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EtcdSpec spec = 2;

  optional EtcdStatus status = 3;
}

message EtcdList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Etcd TPR objects
  repeated Etcd items = 2;
}

message EtcdSpec {
  // Version of Etcd to be deployed.
  optional string version = 1;

  // Number of instances to deploy for a Etcd database.
  optional int32 replicas = 2;

  // StorageType can be durable (default) or ephemeral
  optional string storageType = 3;

  // Storage spec to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 4;

  // Database authentication secret
  optional k8s.io.api.core.v1.SecretVolumeSource databaseSecret = 5;

  // Init is used to initialize database
  // +optional
  optional InitSpec init = 6;

  // Monitor is used monitor database instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 8;

  // etcd cluster TLS configuration
  optional TLSPolicy tls = 9;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 10;

  // ServiceTemplate is an optional configuration for service used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.ServiceTemplateSpec serviceTemplate = 11;

  // updateStrategy indicates the StatefulSetUpdateStrategy that will be
  // employed to update Pods in the StatefulSet when a revision is made to
  // Template.
  optional k8s.io.api.apps.v1.StatefulSetUpdateStrategy updateStrategy = 12;

  // Indicates that the database is paused and controller will not sync any changes made to this spec.
  // +optional
  optional bool paused = 13;

  // Indicates that the database is halted and all offshoot Kubernetes resources except PVCs are deleted.
  // +optional
  optional bool halted = 14;

  // TerminationPolicy controls the delete operation for database
  // +optional
  optional string terminationPolicy = 15;
}

message EtcdStatus {
  optional string phase = 1;

  optional string reason = 2;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 3;
}

message InitSpec {
  optional ScriptSourceSpec scriptSource = 1;

  optional PostgresWALSourceSpec postgresWAL = 3;

  // Name of stash restoreSession in same namespace of kubedb object.
  // ref: https://github.com/stashed/stash/blob/09af5d319bb5be889186965afb04045781d6f926/apis/stash/v1beta1/restore_session_types.go#L22
  optional k8s.io.api.core.v1.LocalObjectReference stashRestoreSession = 4;
}

// LeaderElectionConfig contains essential attributes of leader election.
// ref: https://github.com/kubernetes/client-go/blob/6134db91200ea474868bc6775e62cc294a74c6c6/tools/leaderelection/leaderelection.go#L105-L114
message LeaderElectionConfig {
  // LeaseDuration is the duration in second that non-leader candidates will
  // wait to force acquire leadership. This is measured against time of
  // last observed ack. Default 15
  optional int32 leaseDurationSeconds = 1;

  // RenewDeadline is the duration in second that the acting master will retry
  // refreshing leadership before giving up. Normally, LeaseDuration * 2 / 3.
  // Default 10
  optional int32 renewDeadlineSeconds = 2;

  // RetryPeriod is the duration in second the LeaderElector clients should wait
  // between tries of actions. Normally, LeaseDuration / 3.
  // Default 2
  optional int32 retryPeriodSeconds = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=mariadbs,singular=mariadb,shortName=md,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message MariaDB {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MariaDBSpec spec = 2;

  optional MariaDBStatus status = 3;
}

message MariaDBList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of MariaDB TPR objects
  repeated MariaDB items = 2;
}

message MariaDBSpec {
  // Version of MariaDB to be deployed.
  optional string version = 1;

  // Number of instances to deploy for a MariaDB database.
  optional int32 replicas = 2;

  // StorageType can be durable (default) or ephemeral
  optional string storageType = 3;

  // Storage spec to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 4;

  // Database authentication secret
  optional k8s.io.api.core.v1.SecretVolumeSource databaseSecret = 5;

  // Init is used to initialize database
  // +optional
  optional InitSpec init = 6;

  // Monitor is used monitor database instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 7;

  // ConfigSource is an optional field to provide custom configuration file for database (i.e custom-mysql.cnf).
  // If specified, this file will be used as configuration file otherwise default configuration file will be used.
  optional k8s.io.api.core.v1.VolumeSource configSource = 8;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 9;

  // ServiceTemplate is an optional configuration for service used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.ServiceTemplateSpec serviceTemplate = 10;

  // updateStrategy indicates the StatefulSetUpdateStrategy that will be
  // employed to update Pods in the StatefulSet when a revision is made to
  // Template.
  optional k8s.io.api.apps.v1.StatefulSetUpdateStrategy updateStrategy = 11;

  // Indicates that the database is paused and controller will not sync any changes made to this spec.
  // +optional
  optional bool paused = 12;

  // Indicates that the database is halted and all offshoot Kubernetes resources except PVCs are deleted.
  // +optional
  optional bool halted = 13;

  // TerminationPolicy controls the delete operation for database
  // +optional
  optional string terminationPolicy = 14;
}

message MariaDBStatus {
  optional string phase = 1;

  optional string reason = 2;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 3;
}

message MemberSecret {
  // PeerSecret is the secret containing TLS certs used by each etcd member pod
  // for the communication between etcd peers.
  optional string peerSecret = 1;

  // ServerSecret is the secret containing TLS certs used by each etcd member pod
  // for the communication between etcd server and its clients.
  optional string serverSecret = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=memcacheds,singular=memcached,shortName=mc,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message Memcached {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MemcachedSpec spec = 2;

  optional MemcachedStatus status = 3;
}

message MemcachedList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Memcached TPR objects
  repeated Memcached items = 2;
}

message MemcachedSpec {
  // Version of Memcached to be deployed.
  optional string version = 5;

  // Number of instances to deploy for a Memcached database.
  optional int32 replicas = 6;

  // Monitor is used monitor database instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 7;

  // ConfigSource is an optional field to provide custom configuration file for database.
  // If specified, this file will be used as configuration file otherwise default configuration file will be used.
  optional k8s.io.api.core.v1.VolumeSource configSource = 8;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 9;

  // ServiceTemplate is an optional configuration for service used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.ServiceTemplateSpec serviceTemplate = 10;

  // The deployment strategy to use to replace existing pods with new ones.
  // +optional
  optional k8s.io.api.apps.v1.DeploymentStrategy strategy = 4;

  // Indicates that the database is paused and controller will not sync any changes made to this spec.
  // +optional
  optional bool paused = 11;

  // Indicates that the database is halted and all offshoot Kubernetes resources except PVCs are deleted.
  // +optional
  optional bool halted = 12;

  // TerminationPolicy controls the delete operation for database
  // +optional
  optional string terminationPolicy = 13;
}

message MemcachedStatus {
  optional string phase = 1;

  optional string reason = 2;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=mongodbs,singular=mongodb,shortName=mg,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message MongoDB {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MongoDBSpec spec = 2;

  optional MongoDBStatus status = 3;
}

message MongoDBConfigNode {
  // MongoDB config server node configs
  optional MongoDBNode mongoDBNode = 1;

  // Storage to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 2;
}

message MongoDBList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of MongoDB TPR objects
  repeated MongoDB items = 2;
}

message MongoDBMongosNode {
  // MongoDB mongos node configs
  optional MongoDBNode mongoDBNode = 5;

  // The deployment strategy to use to replace existing pods with new ones.
  // Deprecated: Deployment has been Replaced by StatefulSet. MongosNode now uses spec.updateStrategy
  optional k8s.io.api.apps.v1.DeploymentStrategy strategy = 4;
}

message MongoDBNode {
  // Replicas represents number of replicas of this specific node.
  // If current node has replicaset enabled, then replicas is the amount of replicaset nodes.
  optional int32 replicas = 1;

  // Prefix is the name prefix of this node.
  optional string prefix = 2;

  // ConfigSource is an optional field to provide custom configuration file for database (i.e mongod.cnf).
  // If specified, this file will be used as configuration file otherwise default configuration file will be used.
  optional k8s.io.api.core.v1.VolumeSource configSource = 3;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 4;
}

message MongoDBReplicaSet {
  // Name of replicaset
  optional string name = 1;
}

message MongoDBShardNode {
  // Shards represents number of shards for shard type of node
  // More info: https://docs.mongodb.com/manual/core/sharded-cluster-shards/
  optional int32 shards = 1;

  // MongoDB sharding node configs
  optional MongoDBNode mongoDBNode = 2;

  // Storage to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 3;
}

message MongoDBShardingTopology {
  // Shard component of mongodb.
  // More info: https://docs.mongodb.com/manual/core/sharded-cluster-shards/
  optional MongoDBShardNode shard = 1;

  // Config Server (metadata) component of mongodb.
  // More info: https://docs.mongodb.com/manual/core/sharded-cluster-config-servers/
  optional MongoDBConfigNode configServer = 2;

  // Mongos (router) component of mongodb.
  // More info: https://docs.mongodb.com/manual/core/sharded-cluster-query-router/
  optional MongoDBMongosNode mongos = 3;
}

message MongoDBSpec {
  // Version of MongoDB to be deployed.
  optional string version = 1;

  // Number of instances to deploy for a MongoDB database.
  optional int32 replicas = 2;

  // MongoDB replica set
  optional MongoDBReplicaSet replicaSet = 3;

  // MongoDB sharding topology.
  optional MongoDBShardingTopology shardTopology = 4;

  // StorageType can be durable (default) or ephemeral
  optional string storageType = 5;

  // Storage spec to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 6;

  // Database authentication secret
  optional k8s.io.api.core.v1.SecretVolumeSource databaseSecret = 7;

  // ClusterAuthMode for replicaset or sharding. (default will be x509 if sslmode is not `disabled`.)
  // See available ClusterAuthMode: https://docs.mongodb.com/manual/reference/program/mongod/#cmdoption-mongod-clusterauthmode
  optional string clusterAuthMode = 8;

  // SSLMode for both standalone and clusters. (default, disabled.)
  // See more options: https://docs.mongodb.com/manual/reference/program/mongod/#cmdoption-mongod-sslmode
  optional string sslMode = 9;

  // Init is used to initialize database
  // +optional
  optional InitSpec init = 10;

  // Monitor is used monitor database instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 11;

  // ConfigSource is an optional field to provide custom configuration file for database (i.e mongod.cnf).
  // If specified, this file will be used as configuration file otherwise default configuration file will be used.
  optional k8s.io.api.core.v1.VolumeSource configSource = 12;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 13;

  // ServiceTemplate is an optional configuration for service used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.ServiceTemplateSpec serviceTemplate = 14;

  // updateStrategy indicates the StatefulSetUpdateStrategy that will be
  // employed to update Pods in the StatefulSet when a revision is made to
  // Template.
  optional k8s.io.api.apps.v1.StatefulSetUpdateStrategy updateStrategy = 15;

  // Indicates that the database is paused and controller will not sync any changes made to this spec.
  // +optional
  optional bool paused = 16;

  // Indicates that the database is halted and all offshoot Kubernetes resources except PVCs are deleted.
  // +optional
  optional bool halted = 17;

  // TLS contains tls configurations for client and server.
  // +optional
  optional TLSConfig tls = 18;

  // Secret for KeyFile. Contains keyfile `key.txt` if spec.clusterAuthMode == keyFile || sendKeyFile
  optional k8s.io.api.core.v1.SecretVolumeSource keyFile = 19;

  // TerminationPolicy controls the delete operation for database
  // +optional
  optional string terminationPolicy = 20;
}

message MongoDBStatus {
  optional string phase = 1;

  optional string reason = 2;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=mysqls,singular=mysql,shortName=my,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message MySQL {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MySQLSpec spec = 2;

  optional MySQLStatus status = 3;
}

message MySQLClusterTopology {
  // If set to -
  // "GroupReplication", GroupSpec is required and MySQL servers will start  a replication group
  optional string mode = 1;

  // Group replication info for MySQL
  optional MySQLGroupSpec group = 2;
}

message MySQLGroupSpec {
  // TODO: "Multi-Primary" needs to be implemented
  // Group Replication can be deployed in either "Single-Primary" or "Multi-Primary" mode
  optional string mode = 1;

  // Group name is a version 4 UUID
  // ref: https://dev.mysql.com/doc/refman/5.7/en/group-replication-options.html#sysvar_group_replication_group_name
  optional string name = 2;

  // On a replication master and each replication slave, the --server-id
  // option must be specified to establish a unique replication ID in the
  // range from 1 to 2^32 − 1. “Unique”, means that each ID must be different
  // from every other ID in use by any other replication master or slave.
  // ref: https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_server_id
  //
  // So, BaseServerID is needed to calculate a unique server_id for each member.
  optional int64 baseServerID = 3;
}

message MySQLList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of MySQL TPR objects
  repeated MySQL items = 2;
}

message MySQLSpec {
  // Version of MySQL to be deployed.
  optional string version = 1;

  // Number of instances to deploy for a MySQL database. In case of MySQL group
  // replication, max allowed value is 9 (default 3).
  // (see ref: https://dev.mysql.com/doc/refman/5.7/en/group-replication-frequently-asked-questions.html)
  optional int32 replicas = 2;

  // MySQL cluster topology
  optional MySQLClusterTopology topology = 3;

  // StorageType can be durable (default) or ephemeral
  optional string storageType = 4;

  // Storage spec to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 5;

  // Database authentication secret
  optional k8s.io.api.core.v1.SecretVolumeSource databaseSecret = 6;

  // Init is used to initialize database
  // +optional
  optional InitSpec init = 7;

  // Monitor is used monitor database instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 9;

  // ConfigSource is an optional field to provide custom configuration file for database (i.e custom-mysql.cnf).
  // If specified, this file will be used as configuration file otherwise default configuration file will be used.
  optional k8s.io.api.core.v1.VolumeSource configSource = 10;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 11;

  // ServiceTemplate is an optional configuration for service used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.ServiceTemplateSpec serviceTemplate = 12;

  // updateStrategy indicates the StatefulSetUpdateStrategy that will be
  // employed to update Pods in the StatefulSet when a revision is made to
  // Template.
  optional k8s.io.api.apps.v1.StatefulSetUpdateStrategy updateStrategy = 13;

  // Indicates that the database is paused and controller will not sync any changes made to this spec.
  // +optional
  optional bool paused = 14;

  // Indicates that the database is halted and all offshoot Kubernetes resources except PVCs are deleted.
  // +optional
  optional bool halted = 15;

  // TLS contains tls configurations for client and server.
  // +optional
  optional TLSConfig tls = 16;

  // TerminationPolicy controls the delete operation for database
  // +optional
  optional string terminationPolicy = 17;
}

message MySQLStatus {
  optional string phase = 1;

  optional string reason = 2;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=perconaxtradbs,singular=perconaxtradb,shortName=px,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message PerconaXtraDB {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PerconaXtraDBSpec spec = 2;

  optional PerconaXtraDBStatus status = 3;
}

message PerconaXtraDBList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of PerconaXtraDB TPR objects
  repeated PerconaXtraDB items = 2;
}

message PerconaXtraDBSpec {
  // Version of PerconaXtraDB to be deployed.
  optional string version = 1;

  // Number of instances to deploy for PerconaXtraDB.
  // Replicas: 1		-->		Deploy standalone PerconaXtraDB
  // Replicas: > 1	-->		Deploy PerconaXtraDB cluster with specified number of masters
  optional int32 replicas = 2;

  // StorageType can be durable (default) or ephemeral
  optional string storageType = 3;

  // Storage spec to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 4;

  // Database authentication secret
  optional k8s.io.api.core.v1.SecretVolumeSource databaseSecret = 5;

  // Init is used to initialize database
  // +optional
  optional InitSpec init = 6;

  // Monitor is used monitor database instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 7;

  // ConfigSource is an optional field to provide custom configuration file for database (i.e custom-mysql.cnf).
  // If specified, this file will be used as configuration file otherwise default configuration file will be used.
  optional k8s.io.api.core.v1.VolumeSource configSource = 8;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 9;

  // ServiceTemplate is an optional configuration for service used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.ServiceTemplateSpec serviceTemplate = 10;

  // updateStrategy indicates the StatefulSetUpdateStrategy that will be
  // employed to update Pods in the StatefulSet when a revision is made to
  // Template.
  optional k8s.io.api.apps.v1.StatefulSetUpdateStrategy updateStrategy = 11;

  // Indicates that the database is paused and controller will not sync any changes made to this spec.
  // +optional
  optional bool paused = 12;

  // Indicates that the database is halted and all offshoot Kubernetes resources except PVCs are deleted.
  // +optional
  optional bool halted = 13;

  // TLS contains tls configurations for client and server.
  // +optional
  optional TLSConfig tls = 14;

  // TerminationPolicy controls the delete operation for database
  // +optional
  optional string terminationPolicy = 15;
}

message PerconaXtraDBStatus {
  optional string phase = 1;

  optional string reason = 2;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=pgbouncers,singular=pgbouncer,shortName=pb,categories={proxy,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message PgBouncer {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PgBouncerSpec spec = 2;

  optional PgBouncerStatus status = 3;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message PgBouncerList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of PgBouncer CRD objects.
  repeated PgBouncer items = 2;
}

message PgBouncerSpec {
  // Version of PgBouncer to be deployed.
  optional string version = 1;

  // Number of instances to deploy for a PgBouncer instance.
  // +optional
  optional int32 replicas = 2;

  // ServiceTemplate is an optional configuration for service used to expose database.
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.ServiceTemplateSpec serviceTemplate = 3;

  // PodTemplate is an optional configuration for pods.
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 4;

  // Databases to proxy by connection pooling.
  // +optional
  repeated Databases databases = 5;

  // ConnectionPoolConfig defines Connection pool configuration.
  // +optional
  optional ConnectionPoolConfig connectionPool = 6;

  // UserListSecretRef is a secret with a list of PgBouncer user and passwords.
  // +optional
  optional k8s.io.api.core.v1.LocalObjectReference userListSecretRef = 7;

  // Monitor is used monitor database instance.
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 8;

  // TLS contains tls configurations for client and server.
  // +optional
  optional TLSConfig tls = 9;

  // Indicates that the database is paused and controller will not sync any changes made to this spec.
  // +optional
  optional bool paused = 10;
}

message PgBouncerStatus {
  // Phase specifies the current state of PgBouncer server.
  optional string phase = 1;

  // Reason is used to explain phases of interest of the server.
  optional string reason = 2;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=postgreses,singular=postgres,shortName=pg,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message Postgres {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PostgresSpec spec = 2;

  optional PostgresStatus status = 3;
}

message PostgresArchiverSpec {
  optional kmodules.xyz.objectstore_api.api.v1.Backend storage = 1;
}

message PostgresList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Postgres CRD objects
  repeated Postgres items = 2;
}

message PostgresSpec {
  // Version of Postgres to be deployed.
  optional string version = 1;

  // Number of instances to deploy for a Postgres database.
  optional int32 replicas = 2;

  // Standby mode
  optional string standbyMode = 3;

  // Streaming mode
  optional string streamingMode = 4;

  // Archive for wal files
  optional PostgresArchiverSpec archiver = 5;

  // Leader election configuration
  // +optional
  optional LeaderElectionConfig leaderElection = 6;

  // Database authentication secret
  optional k8s.io.api.core.v1.SecretVolumeSource databaseSecret = 7;

  // StorageType can be durable (default) or ephemeral
  optional string storageType = 8;

  // Storage to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 9;

  // Init is used to initialize database
  // +optional
  optional InitSpec init = 10;

  // Monitor is used monitor database instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 12;

  // ConfigSource is an optional field to provide custom configuration file for database (i.e postgresql.conf).
  // If specified, this file will be used as configuration file otherwise default configuration file will be used.
  optional k8s.io.api.core.v1.VolumeSource configSource = 13;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 14;

  // ServiceTemplate is an optional configuration for service used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.ServiceTemplateSpec serviceTemplate = 15;

  // ReplicaServiceTemplate is an optional configuration for service used to expose postgres replicas
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.ServiceTemplateSpec replicaServiceTemplate = 16;

  // updateStrategy indicates the StatefulSetUpdateStrategy that will be
  // employed to update Pods in the StatefulSet when a revision is made to
  // Template.
  optional k8s.io.api.apps.v1.StatefulSetUpdateStrategy updateStrategy = 17;

  // Indicates that the database is paused and controller will not sync any changes made to this spec.
  // +optional
  optional bool paused = 18;

  // Indicates that the database is halted and all offshoot Kubernetes resources except PVCs are deleted.
  // +optional
  optional bool halted = 19;

  // TLS contains tls configurations for client and server.
  // +optional
  optional TLSConfig tls = 20;

  // TerminationPolicy controls the delete operation for database
  // +optional
  optional string terminationPolicy = 21;
}

message PostgresStatus {
  optional string phase = 1;

  optional string reason = 2;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 3;
}

message PostgresWALSourceSpec {
  optional string backupName = 1;

  optional RecoveryTarget pitr = 2;

  optional kmodules.xyz.objectstore_api.api.v1.Backend backend = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=proxysqls,singular=proxysql,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message ProxySQL {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ProxySQLSpec spec = 2;

  optional ProxySQLStatus status = 3;
}

message ProxySQLBackendSpec {
  // Ref lets one to locate the typed referenced object
  // (in our case, it is the MySQL/Percona-XtraDB/MariaDB object)
  // inside the same namespace.
  optional k8s.io.api.core.v1.TypedLocalObjectReference ref = 7;

  // Number of backend servers.
  optional int32 replicas = 8;
}

message ProxySQLList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of ProxySQL TPR objects
  repeated ProxySQL items = 2;
}

message ProxySQLSpec {
  // Version of ProxySQL to be deployed.
  optional string version = 1;

  // Number of instances to deploy for ProxySQL. Currently we support only replicas = 1.
  // TODO: If replicas > 1, proxysql will be clustered
  optional int32 replicas = 2;

  // Mode specifies the type of MySQL/Percona-XtraDB/MariaDB cluster for which proxysql
  // will be configured. It must be either "Galera" or "GroupReplication"
  optional string mode = 3;

  // Backend specifies the information about backend MySQL/Percona-XtraDB/MariaDB servers
  optional ProxySQLBackendSpec backend = 4;

  // ProxySQL secret containing username and password for root user and proxysql user
  optional k8s.io.api.core.v1.SecretVolumeSource proxysqlSecret = 5;

  // Monitor is used monitor proxysql instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 6;

  // ConfigSource is an optional field to provide custom configuration file for proxysql (i.e custom-proxysql.cnf).
  // If specified, this file will be used as configuration file otherwise default configuration file will be used.
  optional k8s.io.api.core.v1.VolumeSource configSource = 7;

  // PodTemplate is an optional configuration for pods used to expose proxysql
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 8;

  // ServiceTemplate is an optional configuration for service used to expose proxysql
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.ServiceTemplateSpec serviceTemplate = 9;

  // updateStrategy indicates the StatefulSetUpdateStrategy that will be
  // employed to update Pods in the StatefulSet when a revision is made to
  // Template.
  optional k8s.io.api.apps.v1.StatefulSetUpdateStrategy updateStrategy = 10;

  // TLS contains tls configurations for client and server.
  // +optional
  optional TLSConfig tls = 11;

  // Indicates that the database is paused and controller will not sync any changes made to this spec.
  // +optional
  optional bool paused = 12;
}

message ProxySQLStatus {
  optional string phase = 1;

  optional string reason = 2;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 3;
}

message RecoveryTarget {
  // TargetTime specifies the time stamp up to which recovery will proceed.
  optional string targetTime = 1;

  // TargetTimeline specifies recovering into a particular timeline.
  // The default is to recover along the same timeline that was current when the base backup was taken.
  optional string targetTimeline = 2;

  // TargetXID specifies the transaction ID up to which recovery will proceed.
  optional string targetXID = 3;

  // TargetInclusive specifies whether to include ongoing transaction in given target point.
  optional bool targetInclusive = 4;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=redises,singular=redis,shortName=rd,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message Redis {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RedisSpec spec = 2;

  optional RedisStatus status = 3;
}

message RedisClusterSpec {
  // Number of master nodes. It must be >= 3. If not specified, defaults to 3.
  optional int32 master = 1;

  // Number of replica(s) per master node. If not specified, defaults to 1.
  optional int32 replicas = 2;
}

message RedisList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Redis TPR objects
  repeated Redis items = 2;
}

message RedisSpec {
  // Version of Redis to be deployed.
  optional string version = 1;

  // Number of instances to deploy for a MySQL database.
  optional int32 replicas = 2;

  // Default is "Standalone". If set to "Cluster", ClusterSpec is required and redis servers will
  // start in cluster mode
  optional string mode = 3;

  // Redis cluster configuration for running redis servers in cluster mode. Required if Mode is set to "Cluster"
  optional RedisClusterSpec cluster = 4;

  // StorageType can be durable (default) or ephemeral
  optional string storageType = 5;

  // Storage spec to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 6;

  // Monitor is used monitor database instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 7;

  // ConfigSource is an optional field to provide custom configuration file for database (i.e redis.conf).
  // If specified, this file will be used as configuration file otherwise default configuration file will be used.
  optional k8s.io.api.core.v1.VolumeSource configSource = 8;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 9;

  // ServiceTemplate is an optional configuration for service used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.ServiceTemplateSpec serviceTemplate = 10;

  // updateStrategy indicates the StatefulSetUpdateStrategy that will be
  // employed to update Pods in the StatefulSet when a revision is made to
  // Template.
  optional k8s.io.api.apps.v1.StatefulSetUpdateStrategy updateStrategy = 11;

  // Indicates that the database is paused and controller will not sync any changes made to this spec.
  // +optional
  optional bool paused = 12;

  // Indicates that the database is halted and all offshoot Kubernetes resources except PVCs are deleted.
  // +optional
  optional bool halted = 13;

  // TerminationPolicy controls the delete operation for database
  // +optional
  optional string terminationPolicy = 14;
}

message RedisStatus {
  optional string phase = 1;

  optional string reason = 2;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 3;
}

message ScriptSourceSpec {
  optional string scriptPath = 1;

  optional k8s.io.api.core.v1.VolumeSource volumeSource = 2;
}

message TLSConfig {
  // IssuerRef is a reference to a Certificate Issuer.
  optional k8s.io.api.core.v1.TypedLocalObjectReference issuerRef = 1;

  // Certificate provides server certificate options used by PgBouncer pods.
  // These options are passed to a cert-manager Certificate object.
  // xref: https://github.com/jetstack/cert-manager/blob/v0.12.0/pkg/apis/certmanager/v1alpha2/types_certificate.go#L71-L146
  // +optional
  optional CertificateSpec certificate = 2;
}

message TLSPolicy {
  optional MemberSecret member = 1;

  optional string operatorSecret = 2;
}

