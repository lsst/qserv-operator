# Qserv operator CI workflow
---
name: "CI"
on:
  push:
  pull_request:
    branches:
      - main
jobs:
  build:
    name: Build image
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Uninstall go provided by Ubuntu
        run: |
          sudo apt-get remove golang-go
          sudo apt-get remove --auto-remove golang-go
          sudo apt-get purge golang-go
      - uses: actions/setup-go@v3
        with:
          go-version: '^1.17.8'
      - run: go version
      - name: Install go dependencies
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
      - name: Declare Version Variables
        id: vars
        shell: bash
        run: |
          OP_VERSION="$(git describe --always)"
          echo "OP_IMAGE=$(. ./env.build.sh && echo $OP_IMAGE)" >> $GITHUB_ENV
          echo "OP_IMAGE=${OP_IMAGE}"
      - name: Install pre-requisites for build (Operator SDK)
        run: ./prereq-build.sh
      - name: Run Unit Tests
        run: make test
      - name: Build operator image
        run: |
          go mod download
          ./build.sh
          mkdir -p artifacts
          docker save "${{ env.OP_IMAGE }}" > artifacts/qserv-operator-image.tar
          echo "${{ env.OP_IMAGE }}" > artifacts/qserv-operator-image-tag
      - uses: actions/upload-artifact@v2
        with:
          name: docker-artifact
          path: artifacts
  image-analysis:
    name: Analyze image
    runs-on: ubuntu-22.04
    permissions:
      security-events: write
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: docker-artifact
          path: artifacts
      - name: Load image in local registry
        run: |
          docker load --input artifacts/qserv-operator-image.tar
          echo "OP_IMAGE=$(cat artifacts/qserv-operator-image-tag)" >> $GITHUB_ENV
      - name: Scan operator image
        uses: anchore/scan-action@v3
        id: scan
        with:
          image: "${{ env.OP_IMAGE }}"
          acs-report-enable: true
          fail-build: false
      - name: Display SARIF report
        run: |
          cat ${{ steps.scan.outputs.sarif }}
      - name: upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
  e2e:
    name: Run e2e tests
    runs-on: ubuntu-22.04
    needs: build
    env:
      GHA_BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: apparmor
        run: |
          set -x
          sudo apt-get remove mysql-server --purge
          sudo apt-get install apparmor-profiles
          sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.mysqld
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16.3'
      - run: go version
      - name: Install go dependencies
        run: |
          go get golang.org/x/tools/cmd/goimports
      - name: Download qserv-operator image
        uses: actions/download-artifact@v2
        with:
          name: docker-artifact
          path: artifacts
      - name: Create k8s/kind cluster
        run: |
          git clone --depth 1 -b "k8s-1.21.1-1" --single-branch https://github.com/k8s-school/kind-helper.git
          ./kind-helper/k8s-create.sh -s
      - name: Load container image inside kind
        run: |
          kind load image-archive artifacts/qserv-operator-image.tar
          echo "OP_IMAGE=$(cat artifacts/qserv-operator-image-tag)" >> $GITHUB_ENV
      - run: |
          kubectl get nodes
      - name: Install pre-requisites (cert-manager, kustomize)
        run: ./prereq-install.sh
      - name: Deploy operator
        run: |
          export OP_IMAGE="${{ env.OP_IMAGE }}"
          ./deploy.sh
      - name: Deploy Qserv
        run: kubectl apply -k manifests/base
      - name: Wait for Qserv to start
        run: ./tests/tools/wait-qserv-ready.sh -v
      - name: Run E2E Tests
        run: ./tests/e2e/integration.sh
  push:
    name: Push qserv-operator image to public registry
    runs-on: ubuntu-22.04
    needs: e2e
    steps:
      - name: Download qserv-operator image
        uses: actions/download-artifact@v2
        with:
          name: docker-artifact
          path: artifacts
      - name: Load image in local registry
        run: |
          docker load --input artifacts/qserv-operator-image.tar
          echo "IMAGE=$(cat artifacts/qserv-operator-image-tag)" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push image to Docker Hub
        run: |
          docker push ${{ env.IMAGE }}
