#######################
Manage Qserv deployment
#######################

Prerequisites
=============

For all setups
--------------

-  Access to a Kubernetes v1.19+ cluster via a valid ``KUBECONFIG`` file.
-  Dynamic volume provisionning need to be available on the Kubernetes cluster (for example `kind <https://kind.sigs.k8s.io/>`__ for or
   GKE).

For a development workstation
-----------------------------

-  Ubuntu LTS is recommended
-  8 cores, 16 GB RAM, 30GB for the partition hosting docker entities
   (images, volumes, containers, etc). Use ``df`` command as below to
   find its size.

   .. code:: bash

       sudo df â€“sh /var/lib/docker # or /var/snap/docker/common/var-lib-docker/

-  Internet access without proxy
-  ``sudo`` access
-  Install dependencies below:

   .. code:: bash

       sudo apt-get install curl docker.io git vim

-  Add current user to docker group and restart gnome session

   .. code:: bash

       sudo usermod -a -G docker <USER>

-  Install Kubernetes locally using this `simple k8s install script <https://github.com/k8s-school/kind-travis-ci>`__, based on
   `kind <https://kind.sigs.k8s.io/>`__.


Deploy qserv-operator
=====================

`qserv-operator` can be deployed at cluster-scope, and will then manage all Qserv instances of the k8s cluster.
It can also be deployed at namespace-scope, and will then manage Qserv instances based in the same namespace.
Installing in the same k8s cluster, a qserv-operator at cluster-scope and an other at namespace-scope is not supported.

.. code:: sh

    # Deploy qserv-operator at cluster-scope in "qserv-operator-system" namespace
    kubectl apply -f https://raw.githubusercontent.com/lsst/qserv-operator/master/manifests/operator.yaml

    # Deploy qserv-operator at namespace-scope in "qserv-dev" namespace
    curl https://raw.githubusercontent.com/lsst/qserv-operator/master/manifests/operator-ns-scoped.yaml | sed 's/<NAMESPACE>/qserv-dev/' | kubectl apply -f -


Deploy a qserv instance
=======================


with default settings
---------------------

Default settings below are recommended for development purpose, or continuous integration. 

.. code:: sh

    # Install a qserv instance with default settings inside default namespace
    kubectl apply -k https://github.com/lsst/qserv-operator/manifests/dev --namespace='default'

with custom settings
--------------------

For production setup, Qserv install customization is handled with
`Kustomize <https://github.com/kubernetes-sigs/kustomize>`__, which is a
template engine allowing to customize kubernetes Yaml files.
``Kustomize`` is integrated with ``kubectl`` (``-k`` option).

This setup is recommended for production platforms.

Example are available, see below:

.. code:: sh

    # Install a qserv instance with custom settings
    kubectl apply -k https://github.com/lsst/qserv-operator/manifests/ncsa_dev --namespace='qserv-prod'

In order to create a customized Qserv instance, create a ``Kustomize``
overlay using instructions below:

.. code:: sh

    git clone https://github.com/lsst/qserv-operator.git
    cd qserv-operator
    cp -r manifests/dev/ manifests/<customized-overlay>

Then add custom setting, for example container image versions, by
editing ``manifests/<customized-overlay>/qserv.yaml``:

::

    apiVersion: qserv.lsst.org/v1alpha1
    kind: Qserv
    metadata:
      name: qserv
    spec:
      storageclass: "standard"
      storagecapacity: "1Gi"
      # Used by czar and worker pods
      worker:
        replicas: 3
        image: "qserv/qserv:ad8405c"
      replication:
          image: "qserv/replica:tools-w.2018.16-1171-gcbabd53"
          dbimage: "mariadb:10.2.16"
      xrootd:
        image: "qserv/qserv:ad8405c"

It is possible to use any recent Qserv image generated by `Qserv
Travis-CI <https://travis-ci.org/lsst/qserv/>`__

And finally create customized Qserv instance:

.. code:: sh

    kubectl apply -k manifests/my-qserv/ --namespace='<namespace>'

Run Qserv integration tests
===========================

.. code:: bash

    cd "$WORKDIR"
    git clone --depth 1 --single-branch https://github.com/lsst/qserv-operator
    cd qserv-operator
    ./tests/tools/wait-qserv-ready.sh
    ./tests/e2e/integration.sh

Undeploy a Qserv instance
=========================

First list all Qserv instances running in a given namespace

.. code:: sh

    kubectl get qserv -n "<namespace>"

It will output something like:

::

    NAME    CZARS   INGEST-DB   REPL-CTL   REPL-DB   WORKERS   XROOTD   AGE
    qserv   1/1     1/1         1/1        1/1       2/2       2/2      2d10h


Then delete this Qserv instance

.. code:: sh

    kubectl delete qserv qserv -n "<namespace>"

To delete all Qserv instances inside a namespace:

.. code:: sh

    kubectl delete qserv --all -n "<namespace>"

All qserv storage will remain untouch by this operation.
