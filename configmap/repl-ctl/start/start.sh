#!/bin/bash

# Start Qserv replication controller service inside pod

# @author  Fabrice Jammes, IN2P3/SLAC

set -exo pipefail

# Load parameters of the setup into the corresponding environment
# variables

# Start master controller

REPL_DB_PORT="3306"
REPL_DB_USER="qsreplica"
REPL_DB="qservReplica"

. /secret-mariadb/mariadb.secret.sh
. /secret-repl-db/repl-db.secret.sh

QSERV_CZAR_DB_DN="{{.CzarDomainName}}"
QSERV_CZAR_DB_PORT="3306"
QSERV_CZAR_DB="qservMeta"
QSERV_CZAR_DB_USER="root"
QSERV_CZAR_DB_PASSWORD=${MYSQL_ROOT_PASSWORD}

# Ths container share /qserv/datra with czar:
# - to store emptychunk files generated by replication controller
# - to store temporary files for generated secondary index
mkdir -p /qserv/data/ingest

echo "Start replication controller pod: ${HOSTNAME}"

# Wait for repl-db started
# and contactable
while true; do
    if mysql --host="$REPL_DB_DN" --port="$REPL_DB_PORT" --user="$REPL_DB_USER" \
      --password="$MYSQL_REPLICA_PASSWORD" --skip-column-names \
      "${REPL_DB}" -e "SELECT CONCAT('Mariadb is up: ', version())"
    then
        break
    else
        echo "Wait for repl-db startup"
    fi
    sleep 2
done

# Hack to upgrade database schema
# FIXME improve it
entrypoint --log-level DEBUG smig-update --repl-connection mysql://"${REPL_DB_USER}:${MYSQL_REPLICA_PASSWORD}@${REPL_DB_DN}:${REPL_DB_PORT}/${REPL_DB}"


# Wait for all repl-wrk to be registered inside repl-db
while true; do
    REGISTERED_WORKERS=$(mysql --host="$REPL_DB_DN" --port="$REPL_DB_PORT" \
    --user="$REPL_DB_USER" --password="$MYSQL_REPLICA_PASSWORD" \
    --skip-column-names --batch "${REPL_DB}" -e "SELECT count(*) from config_worker")
    if [ "$REGISTERED_WORKERS" -eq "$WORKER_COUNT" ]
    then
        echo "Replication workers all registered inside replication database: \
        (${REGISTERED_WORKERS}/${WORKER_COUNT})"
        break
    else
        echo "Wait for all replication workers to register inside replication database"
    fi
    sleep 2
done

OPT_MALLOC_CONF=
OPT_LD_PRELOAD=
if [ ! -z "${USE_JEMALLOC}" ]; then
    OPT_MALLOC_CONF=prof_leak:true,lg_prof_interval:31,lg_prof_sample:22,prof_final:true
    OPT_LD_PRELOAD=/qserv/lib/libjemalloc.so
fi

# Work directory for the applications. It can be used by applications
# to store core files, as well as various debug information.
# TODO: Enable core dump management inside Kubernetes
WORK_DIR="/tmp"
cd "${WORK_DIR}"

export LSST_LOG_CONFIG="/config-etc/log4cxx.replication.properties"

CONFIG="mysql://${REPL_DB_USER}:${MYSQL_REPLICA_PASSWORD}@${REPL_DB_DN}:${REPL_DB_PORT}/${REPL_DB}"
QSERV_CZAR_DB_URL="mysql://${QSERV_CZAR_DB_USER}:${QSERV_CZAR_DB_PASSWORD}@${QSERV_CZAR_DB_DN}:${QSERV_CZAR_DB_PORT}/${QSERV_CZAR_DB}"
MALLOC_CONF=${OPT_MALLOC_CONF} LD_PRELOAD=${OPT_LD_PRELOAD} \
qserv-replica-master-http \
  --config="${CONFIG}" \
  --qserv-czar-db="${QSERV_CZAR_DB_URL}" \
  --debug \
  --http-root="/usr/local/qserv/www" \
  --controller-http-server-port="{{.ReplicationControllerPort}}" \
  --controller-request-timeout-sec=57600 \
  --controller-job-timeout-sec=57600 \
  --xrootd-host="{{.XrootdRedirectorDn}}" \
  --worker-evict-timeout=3600 \
  --health-probe-interval=120 \
  --replication-interval=1200

# For debug purpose
#while true;
#do
#    sleep 3600
#done
